{"version":3,"sources":["GC.js","LineChart.js","App.js","serviceWorker.js","index.js"],"names":["GC","_ref","gcs","gcList","length","map","gc","react_default","a","createElement","className","key","id","GCType","GCTime","Id","LineChart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","times","labelsArr","i","push","data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","es","width","height","options","annotation","annotations","drawTime","React","Component","App","state","addGC","gcsCopy","toConsumableArray","concat","setState","err","message","getSum","total","num","getTime","reduce","countGC","assertThisInitialized","ws","WebSocket","window","location","host","onopen","onmessage","jsonObjectFromSocket","JSON","parse","bind","onerror","onclose","disconnect","src_GC","src_LineChart","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b86261c.chunk.js","sourcesContent":["import React from 'react';\n\nconst GC = ({ gcs }) => {\n\n  const gcList = gcs.length ? (\n    gcs.map(gc => {\n      return  (\n        <div className=\"gc\" key={gc.id}>\n          <div>GC Type: { gc.GCType }, GC Time: { gc.GCTime }, GC id: {gc.Id}</div>\n        </div>\n      )\n    })\n  ) : (\n    <p className=\"center\">You have no GC events logged</p>\n  )\n  \n  return(\n    <div className=\"gc-list\">\n      {gcList}\n    </div>\n  )\n}\n\nexport default GC;","import React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport 'chartjs-plugin-annotation';\n\nclass LineChart extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log('props state: ', this.props);\n    console.log('props: ', this.props.times);\n  }\n\n  render(){\n    var labelsArr = []\n    for(var i = 0; i < this.props.times.length; i++){\n      labelsArr.push(i)\n    }\n\n    const options = {\n        annotation: {\n          annotations: [{\n            drawTime: 'afterDatasetsDraw',\n            // borderColor: 'red',\n            // borderDash: [2, 2],\n            // borderWidth: 2,\n            // mode: 'vertical',\n            // type: 'line',\n            // value: 10,\n            // scaleID: 'x-axis-0',\n          }]\n        },\n      // maintainAspectRation: false\n    };\n\n    const data = {\n      labels: labelsArr,\n      datasets: [\n        {\n          label: 'Garbage Collector Times',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          // data: [65, 59, 80, 81, 56, 55, 40]\n          data: this.props.times\n        }\n      ]\n    };\n\n    return(\n      <Line\n      data = {data}\n      width={15}\n      height={5}\n      options={options}\n      />\n    )\n  }\n}\n\nexport default LineChart;","import React, { Component } from 'react';\nimport './App.css';\nimport GC from './GC.js'\nimport LineChart from './LineChart';\n\nclass App extends Component {\n\n  state = {\n    gcs: [\n      {GCType: 'test1', GCTime: 25, Id: 0} //{\"GCType\":\"Young Gen GC\",\"GCTime\":623,\"Id\":16}\n    ],\n    times: []\n  }\n\n  constructor(props) { //-----\n    super(props);\n    \n    //connect to websocket\n    console.log(\"entering connect method in App.js\");\n    console.log('this1:' + this);\n    var ws = new WebSocket('ws://' + window.location.host + '/garbageview'); //http://localhost:8080/garbageview\n    console.log(\"in constructor\");\n    console.log(window.location.host);\n    ws.onopen = function(){\n      console.log(\"connected\");\n      console.log(window.location.host);\n    }\n    console.log('this2:' + this);\n    ws.onmessage = function(data){\n        console.log(\"data\" + data.data);\n        var jsonObjectFromSocket = JSON.parse(data.data);\n        console.log(\"jofs = \" + data.data);\n        console.log(JSON.parse(data.data));\n        console.log('at addGC ****');\n        console.log('this3:' + this);\n        this.addGC(jsonObjectFromSocket);\n        console.log(\"in On message\");\n    }.bind(this);\n    ws.onerror = function(){\n      console.log(\"ERROR WITH WS CONNECTION\");\n    };\n    ws.onclose = this.disconnect;\n  } //-----\n\n  componentDidMount() {\n    console.log(\"in comp did mount.----\");\n  }\n\n  addGC = (gc) => {\n    console.log('in addGC ****');\n    try{\n      let gcsCopy = [...this.state.gcs, gc]\n      this.setState({\n        gcs: gcsCopy\n      })\n    }\n    catch(err) {\n      console.log(err.message);\n    }\n    console.log('gcs: ', this.state.gcs);\n    console.log('times: ', this.state.times)\n  }\n\n  getSum = (total, num) => { return total + num; }\n\n  getTime = () => {\n    if(this.state.gcs.length > 0) {\n      this.state.times.push(this.state.gcs[this.state.gcs.length-1].GCTime)\n    }\n    console.log('times: ', this.state.times)\n    return this.state.times.reduce(this.getSum, 0)\n  }\n\n  /**\n   * Counts the number of JSON entries in the gcs array\n   * This is the number for GC events that the server has sent over to the React socket\n   */\n  countGC = () => { return this.state.gcs.length; }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Welcome to GarbageView</h1>\n        <p>Number of Garbage Collectors: {this.countGC()}</p>\n        <p>Total time of all GC events: {this.getTime()}</p>\n        <p>List of Garbage Collectors:</p>\n        <GC gcs = {this.state.gcs}/>\n        <LineChart times = {this.state.times}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n  // addTime = (time) => {\n  //   console.log('in addTime!!!!!!!!!!')\n  //   let timesCopy = [...this.state.times, time]\n  //   this.setState({\n  //     times: timesCopy\n  //   })\n  //   console.log('times: ', this.state.times)\n  // }\n\n\n  // connect() {\n  //   console.log(\"entering connect method in App.js\");\n  //   this.ws = new WebSocket('ws://' + window.location.host + '/garbageview'); //http://localhost:8080/garbageview\n  //   console.log(window.location.host);\n  //   this.ws.onopen = function(){\n  //     console.log(\"connected\");\n  //   }\n  //   this.ws.onmessage = function(data){\n  //       // showJSON(data.data);\n  //       this.showJSON();\n  //   }\n  //   this.ws.onerror = function(){\n  //     console.log(\"ERROR WITH WS CONNECTION\");\n  //   };\n  //   this.ws.onclose = this.disconnect;\n  // }\n\n  // disconnect() {\n  //     if (this.ws != null) {\n  //       this.ws.close();\n  //     }\n  //     // setConnected(false);\n  //     console.log(\"Disconnected\");\n  // }\n\n  // function showJSON(message) {\n  //     $(\"#greetings\").append(\" \" + message + \"\");\n  // }\n  // showJSON() {\n  //   message = \"hello!\";\n  //   $(\"#greetings\").append(\" \" + message + \"\");\n  // }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}